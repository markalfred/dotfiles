[
  { "keys": ["super+shift+w"], "command": "close_all" },
  { "keys": ["super+q"], "command": "do_nothing" },
  { "keys": ["ctrl+super+q"], "command": "close_window" },

  { "keys": ["ctrl+super+y"], "command": "cucumber_step_finder" },

  { "keys": ["super+semicolon"], "command": "move_to", "args": {"to": "eol", "extend": false} },

  { "keys": ["ctrl+super+r"], "command": "reveal_in_side_bar" },

  { "keys": ["ctrl+o"], "command": "toggle_overwrite" },

  { "keys": ["ctrl+shift+space"], "command": "auto_complete" },

  { "keys": ["super+."], "command": "open_file", "args": {"contents": "[\n $0\n]\n", "file": "${packages}/User/Default ($platform).sublime-keymap"} },

  { "keys": ["shift+alt+down"], "command": "goto_definition" },

  // Swap selections.
  { "keys": ["ctrl+r"], "command": "permute_selection", "args": {"operation": "reverse"} },

  // Better pasting.
  { "keys": ["super+v"], "command": "paste_and_indent" },
  { "keys": ["super+shift+v"], "command": "paste" },

  // Better Coffeescript's Toggle Parens command
  {"keys": ["alt+shift+9"], "command": "toggle_parens"},

  // Working replace.
  { "keys": ["alt+shift+f"], "command": "show_panel", "args": {"panel": "replace", "reverse": false} },
  { "keys": ["alt+shift+g"], "command": "replace_next" },

  // Reindent on pipe.
  { "keys": ["|"], "command": "reindent", "args": {"single_line": false}, "context": [{ "key": "setting.command_mode", "operand": true }]},

  // SublimeGit.
  { "keys": ["ctrl+s"], "command": "git_status"},
  { "keys": [" "], "command": "show_overlay", "args": {"overlay": "command_palette", "text": "Git: "},
    "context": [{ "key": "selector", "operator": "equal", "operand": "text.git-status" }]},

  { "keys": ["^"], "command": "git_push", "context": [{ "key": "selector", "operator": "equal", "operand": "text.git-status" }]},
  { "keys": ["v"], "command": "git_pull", "context": [{ "key": "selector", "operator": "equal", "operand": "text.git-status" }]},
  { "keys": [","], "command": "git_custom", "context": [{ "key": "selector", "operator": "equal", "operand": "text.git-status" }]},

  { "keys": ["escape"], "command": "close", "context": [{ "key": "selector", "operator": "equal", "operand": "text.git-commit" }, { "key": "setting.command_mode", "operand": true }]},
  { "keys": ["escape"], "command": "close", "context": [{ "key": "selector", "operator": "equal", "operand": "source.git-diff" }, { "key": "setting.command_mode", "operand": true }]},
  { "keys": ["escape"], "command": "close", "context": [{ "key": "selector", "operator": "equal", "operand": "source.git-show" }, { "key": "setting.command_mode", "operand": true }]},
  { "keys": ["escape"], "command": "close", "context": [{ "key": "selector", "operator": "equal", "operand": "text.git-blame" }, { "key": "setting.command_mode", "operand": true }]},

  { "keys": ["q", "q"], "command": "close", "context": [{ "key": "selector", "operator": "equal", "operand": "text.git-status" }]},
  { "keys": ["q"], "command": "close", "context": [{ "key": "selector", "operator": "equal", "operand": "source.git-diff" }]},
  { "keys": ["d"], "command": "close", "context": [{ "key": "selector", "operator": "equal", "operand": "source.git-diff" }]},
  { "keys": ["q"], "command": "close", "context": [{ "key": "selector", "operator": "equal", "operand": "source.git-show" }]},
  { "keys": ["q"], "command": "close", "context": [{ "key": "selector", "operator": "equal", "operand": "text.git-blame" }]},

  // Status - Cycle through sections.
  { "keys": ["J"], "command": "git_status_move", "args": {"goto": "section:next"}, "context": [{ "key": "selector", "operator": "equal", "operand": "text.git-status" }]},
  { "keys": ["K"], "command": "git_status_move", "args": {"goto": "section:prev"}, "context": [{ "key": "selector", "operator": "equal", "operand": "text.git-status" }]},
  { "keys": ["E"], "command": "git_status_move", "args": {"goto": "section:prev"}, "context": [{ "key": "selector", "operator": "equal", "operand": "text.git-status" }]},

  // Status - Cycle through files.
  { "keys": ["j"], "command": "git_status_move", "args": {"goto": "item:next"}, "context": [{ "key": "selector", "operator": "equal", "operand": "text.git-status" }]},
  { "keys": ["k"], "command": "git_status_move", "args": {"goto": "item:prev"}, "context": [{ "key": "selector", "operator": "equal", "operand": "text.git-status" }]},
  { "keys": ["e"], "command": "git_status_move", "args": {"goto": "item:prev"}, "context": [{ "key": "selector", "operator": "equal", "operand": "text.git-status" }]},

  // Diff - Cycle through files.
  { "keys": ["J"], "command": "git_diff_move", "args": {"item": "file", "which": "next"}, "context": [{ "key": "selector", "operator": "equal", "operand": "source.git-diff"}]},
  { "keys": ["K"], "command": "git_diff_move", "args": {"item": "file", "which": "prev"}, "context": [{ "key": "selector", "operator": "equal", "operand": "source.git-diff"}]},
  { "keys": ["E"], "command": "git_diff_move", "args": {"item": "file", "which": "prev"}, "context": [{ "key": "selector", "operator": "equal", "operand": "source.git-diff"}]},
  { "keys": ["J"], "command": "git_diff_move", "args": {"item": "file", "which": "next"}, "context": [{ "key": "selector", "operator": "equal", "operand": "source.git-show"}]},
  { "keys": ["K"], "command": "git_diff_move", "args": {"item": "file", "which": "prev"}, "context": [{ "key": "selector", "operator": "equal", "operand": "source.git-show"}]},
  { "keys": ["E"], "command": "git_diff_move", "args": {"item": "file", "which": "prev"}, "context": [{ "key": "selector", "operator": "equal", "operand": "source.git-show"}]},

  // Diff - Cycle through hunks.
  { "keys": ["j"], "command": "git_diff_move", "args": {"item": "hunk", "which": "next"}, "context": [{ "key": "selector", "operator": "equal", "operand": "source.git-diff"}]},
  { "keys": ["k"], "command": "git_diff_move", "args": {"item": "hunk", "which": "prev"}, "context": [{ "key": "selector", "operator": "equal", "operand": "source.git-diff"}]},
  { "keys": ["e"], "command": "git_diff_move", "args": {"item": "hunk", "which": "prev"}, "context": [{ "key": "selector", "operator": "equal", "operand": "source.git-diff"}]},
  { "keys": ["j"], "command": "git_diff_move", "args": {"item": "hunk", "which": "next"}, "context": [{ "key": "selector", "operator": "equal", "operand": "source.git-show"}]},
  { "keys": ["k"], "command": "git_diff_move", "args": {"item": "hunk", "which": "prev"}, "context": [{ "key": "selector", "operator": "equal", "operand": "source.git-show"}]},
  { "keys": ["e"], "command": "git_diff_move", "args": {"item": "hunk", "which": "prev"}, "context": [{ "key": "selector", "operator": "equal", "operand": "source.git-show"}]},

  // Scroll pages.
  { "keys": [" "], "command": "move", "args": {"by": "pages", "forward": true}, "context": [{ "key": "selector", "operator": "equal", "operand": "source.git-diff"}]},
  { "keys": ["b"], "command": "move", "args": {"by": "pages", "forward": false}, "context": [{ "key": "selector", "operator": "equal", "operand": "source.git-diff"}]},
  { "keys": [" "], "command": "move", "args": {"by": "pages", "forward": true}, "context": [{ "key": "selector", "operator": "equal", "operand": "source.git-show"}]},
  { "keys": ["b"], "command": "move", "args": {"by": "pages", "forward": false}, "context": [{ "key": "selector", "operator": "equal", "operand": "source.git-show"}]},

  // Home + End keys.
  { "keys": ["home"], "command": "move_to", "args": {"to": "bol", "extend": false} },
  { "keys": ["end"], "command": "move_to", "args": {"to": "eol", "extend": false} },
  { "keys": ["shift+home"], "command": "move_to", "args": {"to": "bol", "extend": true} },
  { "keys": ["shift+end"], "command": "move_to", "args": {"to": "eol", "extend": true} },
  { "keys": ["super+home"], "command": "move_to", "args": {"to": "bof", "extend": false} },
  { "keys": ["super+end"], "command": "move_to", "args": {"to": "eof", "extend": false} },
  { "keys": ["super+shift+home"], "command": "move_to", "args": {"to": "bof", "extend": true} },
  { "keys": ["super+shift+end"], "command": "move_to", "args": {"to": "eof", "extend": true} },

  // Override pairing so that tab puts cursor outside of the pair
  // Auto-pair quotes
  { "keys": ["\""], "command": "insert_snippet", "args": {"contents": "\"$1\""}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|>|$)", "match_all": true },
      { "key": "preceding_text", "operator": "not_regex_contains", "operand": "[\"a-zA-Z0-9_]$", "match_all": true },
      { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.double", "match_all": true }
    ]
  },
  { "keys": ["\""], "command": "insert_snippet", "args": {"contents": "\"${1:$SELECTION}\""}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },

  // Auto-pair single quotes
  { "keys": ["'"], "command": "insert_snippet", "args": {"contents": "'$1'"}, "context":
    [
      { "key": "setting.command_mode", "operand": false },
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|>|$)", "match_all": true },
      { "key": "preceding_text", "operator": "not_regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
      { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true }
    ]
  },
  { "keys": ["'"], "command": "insert_snippet", "args": {"contents": "'${1:$SELECTION}'"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },

  // Auto-pair backticks
  { "keys": ["`"], "command": "insert_snippet", "args": {"contents": "`$1`"}, "context":
    [
      { "key": "setting.command_mode", "operand": false },
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|>|$)", "match_all": true },
      { "key": "preceding_text", "operator": "not_regex_contains", "operand": "[`a-zA-Z0-9_]$", "match_all": true },
      { "key": "eol_selector", "operator": "not_equal", "operand": "string.template", "match_all": true }
    ]
  },
  { "keys": ["`"], "command": "insert_snippet", "args": {"contents": "`${1:$SELECTION}`"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },

  // Auto-pair brackets
  { "keys": ["("], "command": "insert_snippet", "args": {"contents": "($1)"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|;|\\}|$)", "match_all": true }
    ]
  },
  { "keys": ["("], "command": "insert_snippet", "args": {"contents": "(${1:$SELECTION})"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },


  // Auto-pair square brackets
  { "keys": ["["], "command": "insert_snippet", "args": {"contents": "[$1]"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|;|\\}|$)", "match_all": true }
    ]
  },
  { "keys": ["["], "command": "insert_snippet", "args": {"contents": "[${1:$SELECTION}]"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },

  // Auto-pair curly brackets
  { "keys": ["{"], "command": "insert_snippet", "args": {"contents": "{$1}"}, "context":
    [
      { "key": "setting.command_mode", "operand": false },
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true }
    ]
  },
  { "keys": ["{"], "command": "insert_snippet", "args": {"contents": "{${1:$SELECTION}}"}, "context":
    [
      { "key": "setting.command_mode", "operand": false },
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },

  // Add a space inside JS curly brackets
  { "keys": [" "], "command": "insert_snippet", "args": {"contents": " $1 "}, "context":
    [
      { "key": "selector", "operator": "equal", "operand": "(source.js, source.jsx, source.ts, source.tsx)"},
      { "key": "setting.command_mode", "operand": false },
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "preceding_text", "operator": "regex_contains", "operand": "(\\{$)", "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "(^\\})", "match_all": true }

    ]
  },
  // Also remove it
  { "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Left Right.sublime-macro"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "preceding_text", "operator": "regex_contains", "operand": "\\{ $", "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^ \\}", "match_all": true }
    ]
  },

  // LSP: Run Code Action
  {
      "command": "lsp_code_actions",
      "keys": [
          "alt+enter"
      ],
      "context": [
          {
              "key": "lsp.session_with_capability",
              "operator": "equal",
              "operand": "codeActionProvider"
          }
      ]
  },

  // LSP: Find References
  {
      "keys": ["shift+primary+b"],
      "command": "lsp_symbol_references",
      "args": {"side_by_side": false, "force_group": true, "fallback": false, "group": -1},
      "context": [{"key": "lsp.session_with_capability", "operand": "referencesProvider"}]
  },
  // LSP: Goto Definition
  {
      "keys": ["primary+b"],
      "command": "lsp_symbol_definition",
      "args": {"side_by_side": false, "force_group": true, "fallback": false, "group": -1},
      "context": [
          {"key": "lsp.session_with_capability", "operand": "definitionProvider"},
          {"key": "auto_complete_visible", "operand": false}
      ]
  },
]
